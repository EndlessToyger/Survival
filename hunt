<drac2> 

# Setup the embed
base = f'embed -title "{name} goes hunting!" -color {color} -thumb {image} -desc "Hunting takes time and patience. From tracking the animal to setting up the shot to harvesting the meat, it all takes time and patience."'

# Grab svars
sgdata = load_json(get_svar("HuntSpeciesSmall", '[{"species": "Squirrel", "weight": 5, "percent": 0, "AC": 10}, {"species": "Rabbit", "weight": 8, "percent": 45, "AC": 11}, {"species": "Turkey", "weight": 20, "percent": 75, "AC": 12}, {"species": "Waterfowl", "weight": 10, "percent": 85, "AC": 15}, {"species": "Pheasant", "weight": 5, "percent": 95, "AC": 14}]'))
bgdata = load_json(get_svar("HuntSpeciesBig", '[{"species": "Deer", "weight": 100, "percent": 0, "AC": 14}, {"species": "Elk", "weight": 200, "percent": 40, "AC": 16}, {"species": "Bear", "weight": 150, "percent": 65, "AC": 18}, {"species": "Boar", "weight": 350, "percent": 75, "AC": 18}, {"species": "Antelope", "weight": 125, "percent": 90, "AC": 16}, {"species": "Mountain Lion", "weight": 80, "percent": 95, "AC": 17}]'))
aqdata = load_json(get_svar("HuntSpeciesAquatic", '[{"species": "Crab", "weight": 5, "percent": 0, "AC": 13}, {"species": "Snapper", "weight": 8, "percent": 30, "AC": 12}, {"species": "Cod", "weight": 13, "percent": 65, "AC": 14}, {"species": "Yellowtail", "weight": 22, "percent": 85, "AC": 16}, {"species": "Barracuda", "weight": 70, "percent": 97, "AC": 18}]'))
settings = load_json(get_svar("SurvSettings", '{"fishFind": [10,50,80,95], "fishHarvDC": 20, "huntFind": [10,45,75,90], "huntHarvDC": 22, "foraFind": [15,40,85,90], "foraHarvDC": 17, "harvest": true, "cooldown": false, "coolTime": 0, "fishCool": false, "fishCoolTime": 0, "huntCool": false, "huntCoolTime": 0, "forageCool": false, "forageCoolTime": 0}'))

# Setup
c = character()
cs = character().skills
rr_num = c.csettings.get("reroll", None)
args = &ARGS&
parse = argparse(args)
dc_percent_list = settings.get("huntFind")
max_DC = settings.get("huntHarvDC")
percentile_species = vroll('1d100')
percentile_dc = vroll('1d100')
loot_added = False

# Process bonuses from args
misc_bonus = ""
find_bonus = ""
kill_bonus = ""
harv_bonus = ""
bonus = parse.get('b')
fbonus = parse.get('fb')
kbonus = parse.get('kb')
hbonus = parse.get('hb')
if "-b" in args:
	misc_bonus += f'+{bonus[0]}'
if "-fb" in args:
	find_bonus += f'+{fbonus[0]}'
if "-kb" in args:
	kill_bonus += f'+{kbonus[0]}'
if "-hb" in args:
	harv_bonus += f'+{hbonus[0]}'

# Setup advantage boolwise logic
advbase = parse.adv(boolwise=True)
far = parse.adv(custom={'adv': 'fadv', 'dis': 'fdis'}, boolwise=True)
har = parse.adv(custom={'adv': 'hadv', 'dis': 'hdis'}, boolwise=True)
if far == None and advbase != None:
	far = advbase
if har == None and advbase != None:
	har = advbase
if far == True and advbase != None:
	if advbase == False:
		far = None
	else:
		far = far
if far == False and advbase != None:
	if advbase == True:
		far = None
	else:
		far = far
if har == True and advbase != None:
	if advbase == False:
		har = None
	else:
		har = har
if har == False and advbase != None:
	if advbase == True:
		har = None
	else:
		har = har

# Setup advantage handling for attack
if parse.get('ea'):
	if parse.get('dis') or parse.get('kdis'):
		attackadv = 0
	else:
		attackadv = 2
elif parse.get('adv'):
	if parse.get('dis') or parse.get('kdis'):
		attackadv = 0
	else:
		attackadv = 1
elif parse.get('kadv'):
	if parse.get('dis') or parse.get('kdis'):
		attackadv = 0
	else:
		attackadv = 1
elif parse.get('kdis') or parse.get('dis'):
	attackadv = -1
else:
	attackadv = 0

# Setup settings for bag integration and automatic harvesting
bag_setting = load_json(get("SurvivalNoBag", "false").lower())
if bag_setting is True:
	bag_integration = False
else:
	bag_integration = True
harv_setting = load_json(get("huntSurvHarvesting", "true").lower())
if harv_setting is False or settings.get('harvest') is False:
	harvesting = False
else:
	harvesting = True

# Setup error based on args
if len(args) == 0:
	err(f"You must provide an argument of \'big\', \'small\', or \'aquatic\' to hunt")
elif len(args) > 0 and args[0] not in ['small', 'big', 'large', 'aquatic', 'marine', 'help', '?']:
	err(f"Your first argument must be \'big\', \'small\', or \'aquatic\' to hunt")

# Help setup
help = f'help {ctx.alias} -here'
if len(args) == 1 and args[0].lower() in '?help':
	return help

# Establish DC to find game
find_dc = 5
for i in dc_percent_list:
	if percentile_dc.total > i:
		find_dc += 5
	else:
		break

# Load the species data from args, some error handling
if 'small' in args:
	if len(sgdata) == 0 or len(sgdata[0]) == 0:
		err("Seems like your server's bot gurus have disabled small game hunting. Please contact them to correct this. They can check `{ctx.prefix}svar HuntSpeciesSmall` to fix it.")
	else:
		huntdata = sgdata
elif 'big' in args or 'large' in args:
	if len(bgdata) == 0 or len(bgdata[0]) == 0:
		err("Seems like your server's bot gurus have disabled big game hunting. Please contact them to correct this. They can check `{ctx.prefix}svar HuntSpeciesBig` to fix it.")
	else:
		huntdata = bgdata
elif 'marine' in args or 'aquatic' in args:
	if len(aqdata) == 0 or len(aqdata[0]) == 0:
		err("Seems like your server's bot gurus have disabled aquatic hunting. Please contact them to correct this. They can check `{ctx.prefix}svar HuntSpeciesAquatic` to fix it.")
	else:
		huntdata = aqdata

# Figure out which animal is being hunted for
index = 0
specific_species = []
for i,j in enumerate(huntdata):
	cur_species = huntdata[i].get('species')
	for arg in args:
		if (arg.lower() in cur_species.lower()) and (cur_species not in specific_species):
			specific_species.append(cur_species)
	if percentile_species.total > huntdata[i].get('percent'):
		index += 1
index -= 1

# Load the data for that particular animal
kill_ac = huntdata[index].get('AC')
species = huntdata[index].get('species')
max_weight = huntdata[index].get('weight')

# Handling if someone does a specific species
targeted = None
if len(specific_species) > 0 and species in specific_species:
	targeted = True
elif len(specific_species) > 0 and species not in specific_species:
	targeted = False

# Roll the check to find a good spot
if 'fani' in args:
	fab = cs.animalHandling
	fskill = "Animal Handling"
elif 'fath' in args:
	fab = cs.athletics
	fskill = "Athletics"
elif 'finsi' in args:
	fab = cs.insight
	fskill = "Insight"
elif 'finv' in args:
	fab = cs.investigation
	fskill = "Investigation"
elif 'fnat' in args:
	fab = cs.nature
	fskill = "Nature"
elif 'fperc' in args:
	fab = cs.perception
	fskill = "Perception"
elif 'fsurv' in args:
	fab = cs.survival
	fskill = "Survival"
else:
	find_skill_list = [cs.animalHandling, cs.athletics, cs.insight, cs.investigation, cs.nature, cs.perception, cs.survival]
	fab = max(find_skill_list)
	f_skills_list = ["Animal Handling", "Athletics", "Insight", "Investigation", "Nature", "Perception", "Survival"]
	findex = find_skill_list.index(fab)
	fskill = f_skills_list[findex]
fmc = (10 if c.csettings.get("talent", False) and fab.prof else None)
find_string = fab.d20(far, rr_num, fmc) + ("+1d4[guidance]" if parse.get("guidance") else "") + misc_bonus + find_bonus
find_check = vroll(find_string)

# Establish the kill check
huntlist = []
attacklist = []
for i in c.attacks:
	if any([j in i.name.lower() for j in ["bow", "javelin", "spear", "trident", "gun"]]):
		huntlist.append(int(i.raw.automation[0].effects[0].attackBonus))
		attacklist.append(i.name)
if len(huntlist) == 0:
	attackname = 'Generic Attack'
	attBonus = dexterityMod + proficiencyBonus
else:
	maxbonus = max(huntlist)
	ind = huntlist.index(maxbonus)
	attackname = attacklist[ind]
	attBonus = maxbonus
kill_string = ["1d20", "2d20kh1", "3d20kh1", "2d20kl1"][attackadv] + ('ro'+rr_num if rr_num else '')
kill_check = vroll(f'{kill_string}+{attBonus}{misc_bonus}{kill_bonus}')

# Establish the harvest check
if 'hani' in args:
	hab = cs.animalHandling
	hskill = "Animal Handling"
elif 'hmed' in args:
	hab = cs.medicine
	hskill = "Medicine"
elif 'hnat' in args:
	hab = cs.nature
	hskill = "Nature"
elif 'hsurv' in args:
	hab = cs.survival
	hskill = "Survival"
else:
	harv_skill_list = [cs.animalHandling, cs.medicine, cs.nature, cs.survival]
	hab = max(harv_skill_list)
	h_skills_list = ["Animal Handling", "Medicine", "Nature", "Survival"]
	hindex = harv_skill_list.index(hab)
	hskill = h_skills_list[hindex]
hmc = (10 if c.csettings.get("talent", False) and hab.prof else None)
harvest_string = hab.d20(har, rr_num, hmc) + ("+1d4[guidance]" if parse.get("guidance") else "") + misc_bonus + harv_bonus
harvest_check = vroll(harvest_string)

# Process the harvest check, even if things weren't caught
if harvest_check.total < max_DC:
	harv_percent = floor(harvest_check.total/max_DC*100)
else:
	harv_percent = 100
if harv_percent/100*max_weight < 1:
	harvest = 1
else:
	harvest = floor(harv_percent/100*max_weight)

# Find a good spot (or not), catch it (or not), harvest it and add to bag (or not)
if find_check.total >= find_dc:
	base += f' -f "You managed to find some game!|**DC {find_dc}**\n**{fskill}:** {find_check}\nYou {"are hunting for" if specific_species else "end up finding"}: **{"** or **".join(specific_species) if specific_species else species}**"'
	if (kill_check.result.crit == 1) or ((kill_check.total >= kill_ac) and (int(kill_check.result.crit) != 2)) and (targeted == None or targeted == True):
		base += f' -f "You killed it!|**AC {kill_ac}**\n**{attackname}:** {kill_check}"'
		if harvesting:
			base += f' -f "Time to gut and harvest|**DC {max_DC}** (for 100%)\n**Max Weight:** {max_weight} lbs.\n**{hskill}:** {harvest_check}/{max_DC}*100 = **{harv_percent}%** (max 100)\nYou harvested: **{harvest}** lbs. of **{species}**"'
			if bag_integration is False:
				base += f' -footer "{ctx.prefix}survival help | @eternalphoenix64#3855 | Harvest was not automatically added to your bag."'
			else:
				bag_name = 'Meat'
				bag = load_json(get('bags', []))
				for bag_cat in bag:
					if bag_name.lower() in bag_cat[0].lower():
						bag_name = bag_cat[0]
						bag_loot_count = bag_cat[1][species] if species in list(bag_cat[1].keys()) else 0
						bag_cat[1][species] = bag_cat[1][species] + harvest if bag_loot_count > 0 else harvest
						loot_added = True
						break
				if not loot_added:
					bag.append([bag_name, {species: harvest}])
				c.set_cvar('bags', dump_json(bag))
				base += f' -f "Your meat harvest was added to your bag!|{harvest} pounds of **{species}** was added to your __{bag_name.capitalize()}__ pouch for you!"'
				base += f' -footer "{ctx.prefix}survival help | @eternalphoenix64#3855"'
		else:
			base += f' -f "Not really though|You could have if you wanted to. You\'re a good person. Thank you for not overhunting."'
			base += f' -footer "{ctx.prefix}survival help | @eternalphoenix64#3855"'
	elif targeted == False:
		base += f' -f "Not what you were hunting for|You were hunting for **{"** or **".join(specific_species)}** but all you found was **{species}**. Better luck next time."'
		base += f' -footer "{ctx.prefix}survival help | @eternalphoenix64#3855"'
	else:
		base += f' -f "You missed!|**AC {kill_ac}**\n**{attackname}:** {kill_check}"'
		base += f' -footer "{ctx.prefix}survival help | @eternalphoenix64#3855"'
else:
	base += f' -f "You couldn\'t find anything!|**DC {find_dc}**\n**{fskill}:** {find_check}"'
	base += f' -footer "{ctx.prefix}survival help | @eternalphoenix64#3855"'

# Cooldown handling
if settings.get('huntCoolTime') is not None and settings.get('huntCoolTime') > 0:
	period = settings.get('huntCoolTime')
else:
	period=settings.get('coolTime')
if settings.get('cooldown') == True or settings.get('huntCool') == True:
	last=float(get('last_hunt',0))
	current=float(time()) 
	x = int(last+period)
	if (current-last) < period:
		if period < 91:
			errtext = f' "This command can only be run every {period} seconds"'
		elif (current-last) <= 86400:
			errtext = f'''"You can do this again in {'<t:' + x + ':R'}"'''
		else:
			errtext = f'''"You can do this again on {'<t:' + x + ':D'} at {'<t:' + x + ':T'}"'''
		err(errtext)
	else:
		c.set_cvar('last_hunt',current)

return base
</drac2>
